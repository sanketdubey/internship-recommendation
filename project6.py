import pandas as pd
import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# optional advanced packages
try:
    from sentence_transformers import SentenceTransformer, util
    semantic_model = SentenceTransformer('all-MiniLM-L6-v2')
    use_semantic = True
except:
    use_semantic = False

try:
    from googletrans import Translator
    translator = Translator()
    use_translate = True
except:
    use_translate = False

# ------------- UI TEXTS IN DIFFERENT LANGUAGES -------------
labels = {
    "English": {
        "desc": "Get your top internship recommendations based on your profile.",
        "name": "Your Name (e.g. John Doe)",
        "education": "Education / Degree (e.g. B.Tech CSE 3rd year)",
        "skills": "Your Skills (comma separated) (e.g. Python, SQL, Data Analysis)",
        "sector": "Preferred Sector (e.g. Data Science, Marketing)",
        "location": "Preferred Location (e.g. Mumbai, Remote)",
        "submit": "Recommend Internships",
        "result": "Top Internship Recommendations for"
    },
    "Hindi": {
        "desc": "рдЕрдкрдиреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╢реАрд░реНрд╖ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдЕрдиреБрд╢рдВрд╕рд╛рдПрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
        "name": "рдЖрдкрдХрд╛ рдирд╛рдо (рдЙрджрд╛. рд░рд╛рд╣реБрд▓ рд╢рд░реНрдорд╛)",
        "education": "рд╢рд┐рдХреНрд╖рд╛ / рдбрд┐рдЧреНрд░реА (рдЙрджрд╛. рдмреА.рдЯреЗрдХ рд╕реАрдПрд╕рдИ рддреАрд╕рд░рд╛ рд╡рд░реНрд╖)",
        "skills": "рдЖрдкрдХреЗ рдХреМрд╢рд▓ (рдХреЙрдорд╛ рд╕реЗ рдЕрд▓рдЧ) (рдЙрджрд╛. рдкрд╛рдпрдерди, рдПрд╕рдХреНрдпреВрдПрд▓, рдбреЗрдЯрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг)",
        "sector": "рдкрд╕рдВрджреАрджрд╛ рдХреНрд╖реЗрддреНрд░ (рдЙрджрд╛. рдбреЗрдЯрд╛ рд╕рд╛рдЗрдВрд╕, рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ)",
        "location": "рдкрд╕рдВрджреАрджрд╛ рд╕реНрдерд╛рди (рдЙрджрд╛. рдореБрдВрдмрдИ, рд░рд┐рдореЛрдЯ)",
        "submit": "рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЭрд╛рдПрдБ",
        "result": "рдХреЗ рд▓рд┐рдП рд╢реАрд░реНрд╖ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рдЕрдиреБрд╢рдВрд╕рд╛рдПрдВ"
    },
    "Marathi": {
        "desc": "рддреБрдордЪреНрдпрд╛ рдкреНрд░реЛрдлрд╛рдЗрд▓рд╡рд░ рдЖрдзрд╛рд░рд┐рдд рд╢реАрд░реНрд╖ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд╛.",
        "name": "рддреБрдордЪреЗ рдирд╛рд╡ (рдЙрджрд╛. рд░рд╛рд╣реБрд▓ рдкрд╛рдЯреАрд▓)",
        "education": "рд╢рд┐рдХреНрд╖рдг / рдкрджрд╡реА (рдЙрджрд╛. рдмреА.рдЯреЗрдХ CSE рддрд┐рд╕рд░реЗ рд╡рд░реНрд╖)",
        "skills": "рддреБрдордЪреЗ рдХреМрд╢рд▓реНрдпреЗ (рд╕реНрд╡рд▓реНрдкрд╡рд┐рд░рд╛рдорд╛рдиреЗ рд╡реЗрдЧрд│реЗ) (рдЙрджрд╛. Python, SQL, Data Analysis)",
        "sector": "рдЖрд╡рдбрддрд╛ рд╡рд┐рднрд╛рдЧ (рдЙрджрд╛. Data Science, Marketing)",
        "location": "рдЖрд╡рдбрддреЗ рдард┐рдХрд╛рдг (рдЙрджрд╛. рдореБрдВрдмрдИ, рд░рд┐рдореЛрдЯ)",
        "submit": "рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЪрд╡рд╛",
        "result": "рд╕рд╛рдареА рд╢реАрд░реНрд╖ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╢рд┐рдлрд╛рд░рд╕реА"
    }
}

# multilingual FAQ text
faq = {
    "English":[
        ("What is InternMate?","InternMate is an AI-based engine that recommends internships to students based on their skills, sector and location preferences."),
        ("How does the recommendation work?","We analyze your entered skills, sector, and location, then match them with internships using AI (semantic embeddings/TF-IDF)."),
        ("Do I need to pay to use InternMate?","No. This is a free prototype for students."),
        ("How many internships will I see?","Currently, we show your top 3 matching internships, but this can be increased later."),
        ("Can I get notifications on Email or SMS?","Yes. Email notifications are available; SMS will require phone number verification on Twilio."),
        ("How to change the language?","Use the dropdown at the top to select English, Hindi or Marathi.")
    ],
    "Hindi":[
        ("InternMate рдХреНрдпрд╛ рд╣реИ?","InternMate рдПрдХ AI рдЖрдзрд╛рд░рд┐рдд рдЗрдВрдЬрди рд╣реИ рдЬреЛ рдЫрд╛рддреНрд░реЛрдВ рдХреЛ рдЙрдирдХреЗ рдХреМрд╢рд▓, рдХреНрд╖реЗрддреНрд░ рдФрд░ рд╕реНрдерд╛рди рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЭрд╛рддрд╛ рд╣реИред"),
        ("рд╕рд┐рдлрд╝рд╛рд░рд┐рд╢ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддреА рд╣реИ?","рд╣рдо рдЖрдкрдХреЗ рдХреМрд╢рд▓, рдХреНрд╖реЗрддреНрд░ рдФрд░ рд╕реНрдерд╛рди рдХреЛ рджреЗрдЦрддреЗ рд╣реИрдВ рдФрд░ AI рд╕реЗ рдореИрдЪ рдХрд░рддреЗ рд╣реИрдВред"),
        ("рдХреНрдпрд╛ InternMate рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рднреБрдЧрддрд╛рди рдХрд░рдирд╛ рд╣реЛрдЧрд╛?","рдирд╣реАрдВред рдпрд╣ рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдореБрдлреНрдд рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдк рд╣реИред"),
        ("рдореБрдЭреЗ рдХрд┐рддрдиреА рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреА?","рдЕрднреА рд╣рдо рд╢реАрд░реНрд╖ 3 рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рдЦрд╛рддреЗ рд╣реИрдВ, рдмрд╛рдж рдореЗрдВ рдЗрд╕реЗ рдмрдврд╝рд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред"),
        ("рдХреНрдпрд╛ рдореБрдЭреЗ рдИрдореЗрд▓ рдпрд╛ рдПрд╕рдПрдордПрд╕ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдорд┐рд▓ рд╕рдХрддреЗ рд╣реИрдВ?","рд╣рд╛рдБ, рдИрдореЗрд▓ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЙрдкрд▓рдмреНрдз рд╣реИрдВ; рдПрд╕рдПрдордПрд╕ рдХреЗ рд▓рд┐рдП Twilio рдкрд░ рдирдВрдмрд░ рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рдЪрд╛рд╣рд┐рдПред"),
        ("рднрд╛рд╖рд╛ рдХреИрд╕реЗ рдмрджрд▓реЗрдВ?","рдКрдкрд░ рдбреНрд░реЙрдкрдбрд╛рдЙрди рд╕реЗ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВред")
    ],
    "Marathi":[
        ("InternMate рдХрд╛рдп рдЖрд╣реЗ?","InternMate рд╣реЗ AI рдЖрдзрд╛рд░рд┐рдд рдЗрдВрдЬрд┐рди рдЖрд╣реЗ рдЬреЗ рд╡рд┐рджреНрдпрд╛рд░реНрдереНрдпрд╛рдВрдирд╛ рддреНрдпрд╛рдВрдЪреНрдпрд╛ рдХреМрд╢рд▓реНрдп, рд╡рд┐рднрд╛рдЧ рдЖрдгрд┐ рдард┐рдХрд╛рдгрд╛рд╡рд░реВрди рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рд╕реБрдЪрд╡рддреЗ."),
        ("рд╢рд┐рдлрд╛рд░рд╕ рдХрд╢реА рдХрд╛рд░реНрдп рдХрд░рддреЗ?","рдЖрдореНрд╣реА рддреБрдордЪреЗ рдХреМрд╢рд▓реНрдп, рд╡рд┐рднрд╛рдЧ рдЖрдгрд┐ рдард┐рдХрд╛рдг рдкрд╛рд╣рддреЛ рд╡ AI рдиреЗ рдЬреБрд│рд╡рддреЛ."),
        ("InternMate рд╡рд╛рдкрд░рдгреНрдпрд╛рд╕рд╛рдареА рдкреИрд╕реЗ рджреНрдпрд╛рд╡реЗ рд▓рд╛рдЧрддреАрд▓ рдХрд╛?","рдирд╛рд╣реА. рд╣реЗ рд╡рд┐рджреНрдпрд╛рд░реНрдереНрдпрд╛рдВрд╕рд╛рдареА рдореЛрдлрдд рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдк рдЖрд╣реЗ."),
        ("рдорд▓рд╛ рдХрд┐рддреА рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд┐рд╕рддреАрд▓?","рд╕рдзреНрдпрд╛ рдЖрдореНрд╣реА рддреБрдордЪреНрдпрд╛ рдЯреЙрдк 3 рдЗрдВрдЯрд░реНрдирд╢рд┐рдк рджрд╛рдЦрд╡рддреЛ, рдирдВрддрд░ рд╡рд╛рдврд╡реВ рд╢рдХрддреЛ."),
        ("рдорд▓рд╛ рдИрдореЗрд▓ рдХрд┐рдВрд╡рд╛ рдПрд╕рдПрдордПрд╕ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдорд┐рд│реВ рд╢рдХрддреЗ рдХрд╛?","рд╣реЛрдп, рдИрдореЗрд▓ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд; рдПрд╕рдПрдордПрд╕рд╕рд╛рдареА Twilio рд╡рд░ рдирдВрдмрд░ рд╡реНрд╣реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рд▓рд╛рдЧреЗрд▓."),
        ("рднрд╛рд╖рд╛ рдХрд╢реА рдмрджрд▓рд╛рдпрдЪреА?","рд╡рд░рдЪреНрдпрд╛ рдбреНрд░реЙрдкрдбрд╛рдЙрдирдордзреВрди рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛.")
    ]
}

# -------------------------- Load internship data --------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("internships1.csv")
    df['combined'] = df['RequiredSkills'] + " " + df['Sector'] + " " + df['Location']
    return df

internships = load_data()

# -------------------------- Page Config & CSS --------------------------
st.set_page_config(page_title="InternMate тАУ AI Internship Recommendation", layout="wide")

# тЬЕ Heading above language selector
st.markdown("""
    <style>
    .main-title {
        text-align: center;
        color: #00C3FF;
        font-size: 45px;
        font-weight: 800;
        margin-bottom: 0px;
        font-family: inherit;
    }
    .subtitle {
        text-align: center;
        color: #cccccc;
        font-size: 18px;
        margin-top: 5px;
        margin-bottom: 30px;
        font-family: inherit;
    }
    .reco-card {
        background-color:#F7F9FC;
        padding:15px;
        border-radius:10px;
        margin-bottom:10px;
        box-shadow:0 4px 8px rgba(0,0,0,0.1);
    }
    .reco-title {
        color:#007BFF;
        font-size:20px;
        font-weight:600;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown("<div class='main-title'>InternMate</div>", unsafe_allow_html=True)
st.markdown("<div class='subtitle'>AI-Based Internship Recommendation Engine</div>", unsafe_allow_html=True)

# language selector below heading
lang = st.selectbox("Choose Language / рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛", ["English","Hindi","Marathi"])
text = labels[lang]

# apply regional font automatically
if lang == "English":
    st.markdown("<style>body{font-family:'Roboto','Segoe UI',sans-serif;}</style>", unsafe_allow_html=True)
else:
    st.markdown("<style>body{font-family:'Noto Sans Devanagari','Mangal',sans-serif;}</style>", unsafe_allow_html=True)

st.write(text['desc'])

# -------------------------- Student Form --------------------------
with st.form("student_form"):
    name = st.text_input(text['name'])
    education = st.text_input(text['education'])
    skills = st.text_area(text['skills'])
    sector_pref = st.text_input(text['sector'])
    location_pref = st.text_input(text['location'])
    submitted = st.form_submit_button(text['submit'])

# -------------------------- If form submitted --------------------------
if submitted:
    student_text = skills + " " + sector_pref + " " + location_pref

    # translate input to English for matching
    if use_translate and lang != "English":
        student_text = translator.translate(student_text, src=lang, dest='en').text

    with st.spinner("ЁЯФО Searching for best internships..."):
        if use_semantic:
            internship_embeddings = semantic_model.encode(internships['combined'], convert_to_tensor=True)
            student_embedding = semantic_model.encode(student_text, convert_to_tensor=True)
            scores = util.cos_sim(student_embedding, internship_embeddings)[0].cpu().numpy()
        else:
            vectorizer = TfidfVectorizer()
            internship_vectors = vectorizer.fit_transform(internships['combined'])
            student_vector = vectorizer.transform([student_text])
            scores = cosine_similarity(student_vector, internship_vectors)[0]

        internships['score'] = scores
        top3 = internships.sort_values(by='score', ascending=False).head(3)

    st.success("тЬЕ Recommendations ready!")
    st.subheader(f"{text['result']} {name}:")

    for _, row in top3.iterrows():
        st.markdown(
            f"""
            <div class='reco-card'>
                <div class='reco-title'>{row['Title']}</div>
                <p style="color:#000000;margin:0;">
                    <b>Skills Required:</b> {row['RequiredSkills']}</p>
                <p style="color:#000000;margin:0;">
                    <b>Sector:</b> {row['Sector']} | <b>Location:</b> {row['Location']}</p>
                <p style="color:#000000;margin:0;">
                    <b>Match Score:</b> {round(row['score']*100,2)}%</p>
            </div>
            """,
            unsafe_allow_html=True
        )

    if st.button("Save these Recommendations (future scope)"):
        st.success("Recommendations saved locally (future scope)")

# -------------------- Help / FAQ Section --------------------
st.markdown("## тЭУ Help / FAQ")
for i,(q,a) in enumerate(faq[lang],start=1):
    with st.expander(f"{i}я╕ПтГг {q}"):
        st.write(a)

st.info("This is an advanced multilingual prototype. Future scope: REST API with Flask, PostgreSQL DB, React frontend, regional languages & SendGrid/Twilio notifications.")
